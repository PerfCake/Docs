<?xml version="1.0" encoding="utf-8"?>
<sect2 xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:db="http://docbook.org/ns/docbook" xml:id="ug.introduction.first-performance-test.quickstart" version="5.0">
   <title>Your own quickstart</title>
   <para>Now you are quite ready to try your own quickstart. You can find it at
      <link xlink:href="https://www.perfcake.org/quickstart/"/>, see you in 5 minutes :).
   </para>
   <simplesect>
      <title>Getting PerfCake</title>
      <para>
         This is your first PerfCake example. You will learn to 1) get PerfCake and install it,
         2) prepare your first simple scenario and run it, 3) evaluate results of your test. Let's start with the first step.
      </para>
      <para>
         The simplest way how to start with PerfCake is to download
         <footnote id="ug.introduction.first-performance-test.quickstart.footnote-download">
            <para>
               <link xlink:href="https://www.perfcake.org/download"/>
            </para>
         </footnote>
         the binary distribution. You can unpack it wherever you want, just remember the directory (let’s call it
         <code>$PERFCAKE_HOME</code>
         )
      </para>
      <para>
         After unpacking you will have your directory with the following structure:
         <programlisting><![CDATA[$PERFCAKE_HOME
├── bin/
│ ├── perfcake.bat
│ └── perfcake.sh
├── lib/
│ ├──ext/
│ ├──plugins/
│ └── *.jar
├── resources/
│ ├── keystores/
│ ├── messages/
│ ├── scenarios/
│ ├── schemas/
│ └── xslt/
├── LICENSE.txt
├── log4j.xml
└── README.md]]></programlisting>
      </para>
      <para>
         You may try to run PerfCake, you should receive output like this:
         <programlisting><![CDATA[$PERFCAKE_HOME/bin/perfcake.sh
 usage: ScenarioExecution -s <SCENARIO> [-sd <SCENARIOS_DIR>] [-md <MESSAGES_DIR>] [-D<property=value>]*
 -D <property=value> system properties
 -log,--log-level <LOG_LEVEL> logging level
 -md,--messages-dir <MESSAGES_DIR> directory for messages
 -pd,--plugins-dir <PLUGINS_DIR> directory for plugins
 -pf,--properties-file <PROPERTIES_FILE> custom system properties file
 -s,--scenario <SCENARIO> scenario to be executed
 -sd,--scenarios-dir <SCENARIOS_DIR> directory for scenarios
 -skip,--skip-timer-benchmark skip system timer benchmark]]>
         </programlisting>
      </para>
      <para>
         The script assumes you have JDK installed and available on the system path, minimal version 1.8 is required.
         Please note that the system being tested is not required to run on Java 8. It might not run on Java at all!
      </para>
      <para>
         In the
         <code>bin</code>
         directory you can find executable scripts for running PerfCake on Linux, Windows and Mac.
      </para>
      <para>
         The
         <code>lib</code>
         directory contains application libraries. You do not have to take any care of these.
      </para>
      <para>
         What is more interesting is the
         <code>resources</code>
         directory. In its subdirectories you can find sample scenarios, messages and all versions of XSD schemas for scenario files. The
         <code>keystores</code>
         directory is used for specific message sender, but we will not deal with it in this quickstart.
      </para>
      <para>
         If you feel like going wild, you can download
         <footnoteref linkend="ug.introduction.first-performance-test.quickstart.footnote-download"/>
         the source distribution and compile it by
         <programlisting>mvn clean package assembly:assembly</programlisting>
      </para>
      <para>
         Then you can find the binary distributions in the
         <code>target</code>
         directory and continue with this quickstart guide. You will also see the output of tests so you can be sure the project works fine on your system.
      </para>
   </simplesect>
   <simplesect>
      <title>Configure and run</title>
      <para>
         In these days, your only possibility to prepare your first scenario is an XML file.
         You can use your favourite editor to create this file. The structure is defined by an XSD schema that can be found under
         <code>resources/schemas</code>
         directory. Some of the editors are able to use the schema file to suggest you valid tags. Our future plans include providing GUI editor for Eclipse and InteliJ Idea that would allow you to create and edit scenarios, stay tuned! If you wanted to contribute, we are happy to
         community
         <footnote>
            <para>
               <link xlink:href="https://www.perfcake.org/community"/>
            </para>
         </footnote>
         to welcome you in our commmunity.
      </para>
      <para>
         At minimum, simple scenario has to contain definitions for:
         <itemizedlist>
            <listitem>
               <simpara>Generator - how the load will be generated (see
                  <xref linkend="ug.reference-guide.generating"/>
                  )
               </simpara>
            </listitem>
            <listitem>
               <simpara>Sender - where the load will be sent - interface or protocol with address, you can choose from many already implemeted (see
                  <xref linkend="ug.reference-guide.sending"/>
                  )
               </simpara>
            </listitem>
         </itemizedlist>
      </para>
      <para>
         Let’s assume you need to stress your web application that has some function exposed on the following URL:
         <code>http://your-app.com/cool-app</code>
         , and you need to test how fast the function is. You want to generate maximum load for 10 seconds (10000 miliseconds)
         with 10 simultaneous clients (working threads).
      </para>
      <para>
         If you do not have any such application at hand, you can consider using
         <link xlink:href="http://httpbin.org/get"/>
         but be polite and do not overload their server. It is provided for free.
      </para>
      <para>
         Now the important part comes. Create a file called
         <code>http-echo.dsl</code>
         (
         <code>http-echo.xml</code>
         resp.) in the
         <code>$PERFCAKE_HOME/resources/scenarios</code>
         directory.
         Now insert the following DSL (XML resp.) snippet in it:
      </para>
      <para>
         <code>http-echo.dsl</code>:
         <programlisting language="java" linenumbering="numbered" startinglinenumber="1"><![CDATA[ scenario "http-echo"
    run 10.s with ${thread.count:10}.threads
    generator "DefaultMessageGenerator"
    sender "HttpSender" target "http://your-app.com/cool-app" method "GET"
 end]]></programlisting>
      </para>
      <para><code>http-echo.xml</code>: <programlisting language="xml" linenumbering="numbered" startinglinenumber="1"><![CDATA[ <?xml version="1.0" encoding="utf-8"?>
 <scenario xmlns="urn:perfcake:scenario:5.0">
    <run type="time" value="10000"/>
    <generator class="DefaultMessageGenerator" 
               threads="${thread.count}"/>
    <sender class="HttpSneder">
       <target>http://your-app.com/cool-app</target>
    </sener>
 </scenario>]]></programlisting>
      </para>
      <!--para>This is just a simple example, you may use different sender or generator, or specify different properties. Everything is described in the
         = succeed "." do
         %a{ :href => "#{site.base_url}/guide/user" } User Guide
      </para>
      <para>You can see
         %tt
         = preserve "${thread.count:10}"
         in the generator’s definition. That is a system property
         %tt
         = preserve "thread.count"
         that you may set and the actual value of the property will be used. If the property is not set, the default value (10) will be used.
      </para>
      <para>Now, all you need to do is to execute your new test scenario by running the following command:
         %pre
         $PERFCAKE_HOME/bin/perfcake.sh -s http-echo
      </para>
      <para>Please note you do not need to specify the DSL (XML) extension. Only if you used both DSL and XML variants.
      </para>
      <para>Now you are running your fisrt stress test. Even if you cannot see what is going on, PerfCake sends requests to your application in many threads. The test should run aproximately for 10 seconds. If you want to see some numbers (e.g. how fast your system is), you have to add one more element to your scenario to evaluate the results - the reporting.</para-->
   </simplesect>
</sect2>
