<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:db="http://docbook.org/ns/docbook" xml:id="ug.introduction.first-performance-test.quickstart" version="8.0">
   <title>Your own quickstart</title>
   <section>
      <title>Preparing PerfCake</title>
      <para> After getting (see <xref linkend="ug.introduction.getting-perfcake.downloading"/> ) and
         unpacking PerfCake you will have your directory with the following structure: <programlisting><![CDATA[$PERFCAKE_HOME
├── bin/
│ ├── perfcake.bat
│ └── perfcake.sh
├── docs/
│ └── perfcake-8.x-javadoc.jar
├── lib/
│ ├──ext/
│ ├──plugins/
│ └── *.jar
├── resources/
│ ├── keystores/
│ ├── messages/
│ ├── scenarios/
│ ├── schemas/
│ └── xslt/
├── LICENSE.txt
└── log4j2.xml]]> </programlisting></para>
      <para> You may try to run PerfCake, you should receive output like this: <programlisting><![CDATA[$PERFCAKE_HOME/bin/perfcake.sh
=== Welcome to PerfCake 8.0 ===
usage: ScenarioExecution -s <SCENARIO> [options] [-D<property=value>]*
 -d,--debug                                start debug JMX agent for
                                           external monitoring
 -D <property=value>                       system properties
 -dn,--debug-name <AGENT_NAME>             debug agent name in the JMX
                                           tree
 -h,--help                                 prints help/usage
 -log,--log-level <LOG_LEVEL>              logging level
 -md,--messages-dir <MESSAGES_DIR>         directory for messages
 -pd,--plugins-dir <PLUGINS_DIR>           directory for plugins
 -pf,--properties-file <PROPERTIES_FILE>   custom system properties file
 -r,--replay <RAW_FILE>                    raw file to be replayed
 -s,--scenario <SCENARIO>                  scenario to be executed
 -sd,--scenarios-dir <SCENARIOS_DIR>       directory for scenarios
 -skip,--skip-timer-benchmark              skip system timer benchmark]]>          </programlisting></para>
      <para>The script assumes you have JDK installed and available on the system path, minimal
         version 1.8 is required. Please note that the system being tested is not required to run on
         Java 8. It might not run on Java at all! </para>
      <para>In the <code>bin</code> directory you can find executable scripts for running PerfCake
         on Linux, Windows and Mac. </para>
      <para>The <code>lib</code> directory contains application libraries. You do not have to take
         any care of these. </para>
      <para>What is more interesting is the <code>resources</code> directory. In its subdirectories
         you can find sample scenarios, messages and all versions of XSD schemas for scenario files.
         The <code>keystores</code> directory is used for specific message sender, but we will not
         deal with it in this quickstart. </para>
      <para>If you feel like going wild, you can download <footnote
            id="ug.introduction.first-performance-test.quickstart.footnote-download">
            <para>
               <link xlink:href="https://www.perfcake.org/download"/>
            </para>
         </footnote> the source distribution and compile it by
         <programlisting>mvn clean package assembly:assembly </programlisting></para>
      <para>Then you can find the binary distributions in the <code>target</code> directory and
         continue with this quickstart guide. You will also see the output of tests so you can be
         sure the project works fine on your system. </para>
   </section>
   <section>
      <title>Configure and run</title>
      <para>In these days, your only possibility to prepare your first scenario is an XML file. You
         can use your favourite editor to create this file. The structure is defined by an XSD
         schema that can be found under <code>resources/schemas</code> directory. Some of the
         editors are able to use the schema file to suggest you valid tags. Our future plans include
         providing GUI editor for Eclipse and InteliJ Idea that would allow you to create and edit
         scenarios, stay tuned! If you wanted to contribute, we are happy to community <footnote>
            <para>
               <link xlink:href="https://www.perfcake.org/community"/>
            </para>
         </footnote> to welcome you in our commmunity. </para>
      <para>
         At minimum, simple scenario has to contain definitions for:
         <itemizedlist>
            <listitem>
               <simpara>Generator - how the load will be generated (see
                  <xref linkend="ug.reference-guide.generating"/>
                  )
               </simpara>
            </listitem>
            <listitem>
               <simpara>Sender - where the load will be sent - interface or protocol with address, you can choose from many already implemeted (see
                  <xref linkend="ug.reference-guide.sending"/>
                  )
               </simpara>
            </listitem>
         </itemizedlist>
      </para>
      <para>
         Let’s assume you need to stress your web application that has some function exposed on the following URL:
         <code>http://your-app.com/cool-app</code>
         , and you need to test how fast the function is. You want to generate maximum load for 10 seconds (10000 miliseconds)
         with 10 simultaneous clients (working threads).
      </para>
      <para>
         If you do not have any such application at hand, you can consider using
         <link xlink:href="http://httpbin.org/get"/>
         but be polite and do not overload their server. It is provided for free.
      </para>
      <para>
         Now the important part comes. Create a file called
         <code>http-echo.dsl</code>
         (
         <code>http-echo.xml</code>
         resp.) in the
         <code>$PERFCAKE_HOME/resources/scenarios</code>
         directory.
         Now insert the following DSL (XML resp.) snippet in it:
      </para>
      <para>
         <code>http-echo.dsl</code>:
         <programlisting language="java" linenumbering="numbered" startinglinenumber="1"><![CDATA[ scenario "http-echo"
    run 10.s with ${thread.count:10}.threads
    generator "DefaultMessageGenerator"
    sender "HttpSender" target "http://your-app.com/cool-app" method "GET"
 end]]></programlisting>
      </para>
      <para>
         <code>http-echo.xml</code>:
         <programlisting language="xml" linenumbering="numbered" startinglinenumber="1"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<scenario xmlns="urn:perfcake:scenario:8.0">
   <run type="time" value="10000"/>
   <generator class="DefaultMessageGenerator" 
              threads="${thread.count}"/>
   <sender class="HttpSender">
      <target>http://your-app.com/cool-app</target>
   </sender>
</scenario>]]> </programlisting></para>
      <para>You can see <code>"${thread.count:10}"</code> in the generator’s definition. That is a
         system property <code>"thread.count"</code> that you may set and the actual value of the
         property will be used. If the property is not set, the default value (10) will be used. </para>
      <para>Now, all you need to do is to execute your new test scenario by running the following
         command:
         <programlisting><![CDATA[$PERFCAKE_HOME/bin/perfcake.sh -s http-echo]]> </programlisting></para>
      <para>Please note you do not need to specify the DSL (XML) extension. Only if you used both
         DSL and XML variants. </para>
      <para>Now you are running your fisrt stress test. Even if you cannot see what is going on,
         PerfCake sends requests to your application in many threads. The test should run
         approximately for 10 seconds. If you want to see some numbers (e.g. how fast your system
         is), you have to add one more element to your scenario to evaluate the results - the
         reporting. </para>
   </section>
   <section>
      <title>Evaluate results</title>
      <para>For reporting some results of your measurement, you have to configure a Reporter - an object that is capable of computing results in some way and outputing them wherever you can imagine.
      </para>
      <para>Copy your
         <code>http-echo.dsl</code>
         (
         <code>http-echo.xml</code>
         resp.) file to
         <code>http-reporting.dsl</code>
         (
         <code>http-reporting.xml</code>
         resp.) and have it look like the listing below.
      </para>
      <para><code>http-reporting.dsl</code>: <programlisting language="java" linenumbering="numbered" startinglinenumber="1"><![CDATA[scenario "http-reporting"
   run 10.s with ${thread.count:10}.threads
   generator "DefaultMessageGenerator"
   sender "HttpSender" target "http://your-app.com/cool-app" method "GET"
   reporter "ResponseTimeStatsReporter" minimumEnabled "false" maximumEnabled "false"
      destination "ChartDestination" every 1.s name "Response Time" group "rt" yAxis "Response Time [ms]" attributes "Result,Average"
      destination "ConsoleDestination" every 1.s
end]]> </programlisting></para>
      <para><code>http-reporting.xml</code>: <programlisting language="xml" linenumbering="numbered" startinglinenumber="1"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<scenario xmlns="urn:perfcake:scenario:8.0">
   <run type="time" value="10000"/>
   <generator class="DefaultMessageGenerator" 
              threads="${thread.count:10}"/>
   <sender class="HttpSender">
      <target>http://your-app.com/cool-app</target>
      <property name="method" value="GET"/>
   </sender>
   <reporting>
      <reporter class="ResponseTimeStatsReporter">
         <property name="minimumEnabled" value="false"/>
         <property name="maximumEnabled" value="false"/>
         <destination class="ChartDestination">
            <period type="time" value="1000"/>
            <property name="name" value="Response Time"/>
            <property name="group" value="rt"/>
            <property name="yAxis" value="Response Time [ms]"/>
            <property name="attributes" value="Result,Average"/>
         </destination>
         <destination class="ConsoleDestination">
            <period type="time" value="1000"/>
         </destination>
      </reporter>
   </reporting>
</scenario>]]></programlisting>Adding the <code>reporting</code> section you let your scenario to
         log results to some destination - in our case to the PerfCake’s console. Output will be
         provided every 2 seconds (2000 miliseconds). </para>
      <para>Try to run the scenario again by the following command: <programlisting><![CDATA[2016-06-14 22:01:56,155 INFO  {org.perfcake.ScenarioExecution} === Welcome to PerfCake 8.0 ===
2016-06-14 22:01:56,386 INFO  {org.perfcake.scenario.ScenarioBuilder} Scenario configuration: file:/home/perfcake/perfcake-8.0/resources/scenarios/http-reporting.xml
2016-06-14 22:01:56,455 INFO  {org.perfcake.util.TimerBenchmark} Benchmarking system timer resolution...
2016-06-14 22:01:56,456 INFO  {org.perfcake.util.TimerBenchmark} This system is able to differentiate up to 334ns. A single thread is now able to measure maximum of 2994011 iterations/second.
2016-06-14 22:01:56,468 INFO  {org.perfcake.message.generator.DefaultMessageGenerator} Starting to generate...
[0:00:01][84 iterations][17%] [141.868302 ms] [warmUp => false] [Threads => 10] [ResponseSize => 0.00 B] [Minimum => 136.702416 ms] [failures => 0] [RequestSize => 0.00 B] [Average => 170.70281994047613 ms]
[0:00:02][155 iterations][27%] [140.435482 ms] [warmUp => false] [Threads => 10] [ResponseSize => 0.00 B] [Minimum => 135.436574 ms] [failures => 0] [RequestSize => 0.00 B] [Average => 157.30522732903225 ms]
[0:00:03][225 iterations][37%] [136.248079 ms] [warmUp => false] [Threads => 10] [ResponseSize => 0.00 B] [Minimum => 134.629032 ms] [failures => 0] [RequestSize => 0.00 B] [Average => 151.3000900355556 ms]
[0:00:04][292 iterations][47%] [146.018769 ms] [warmUp => false] [Threads => 10] [ResponseSize => 0.00 B] [Minimum => 134.629032 ms] [failures => 0] [RequestSize => 0.00 B] [Average => 151.79159557191784 ms]
[0:00:05][360 iterations][57%] [140.239096 ms] [warmUp => false] [Threads => 10] [ResponseSize => 0.00 B] [Minimum => 134.629032 ms] [failures => 0] [RequestSize => 0.00 B] [Average => 150.78039243888892 ms]
[0:00:06][430 iterations][67%] [140.608011 ms] [warmUp => false] [Threads => 10] [ResponseSize => 0.00 B] [Minimum => 134.077543 ms] [failures => 0] [RequestSize => 0.00 B] [Average => 149.0632376767442 ms]
[0:00:07][500 iterations][77%] [150.971978 ms] [warmUp => false] [Threads => 10] [ResponseSize => 0.00 B] [Minimum => 134.077543 ms] [failures => 0] [RequestSize => 0.00 B] [Average => 148.20699049399997 ms]
[0:00:08][571 iterations][87%] [136.759408 ms] [warmUp => false] [Threads => 10] [ResponseSize => 0.00 B] [Minimum => 134.077543 ms] [failures => 0] [RequestSize => 0.00 B] [Average => 147.44373894921188 ms]
[0:00:09][641 iterations][97%] [137.870229 ms] [warmUp => false] [Threads => 10] [ResponseSize => 0.00 B] [Minimum => 134.077543 ms] [failures => 0] [RequestSize => 0.00 B] [Average => 146.7737520499219 ms]
2016-06-14 22:02:06,508 INFO  {org.perfcake.message.generator.DefaultMessageGenerator} Reached test end. All messages were prepared to be sent.
2016-06-14 22:02:06,509 INFO  {org.perfcake.reporting.ReportManager} Checking whether there are more results to be reported...
[0:00:10][662 iterations][100%] [142.601692 ms] [warmUp => false] [Threads => 10] [ResponseSize => 0.00 B] [Minimum => 134.077543 ms] [failures => 0] [RequestSize => 0.00 B] [Average => 146.55668455286997 ms]
2016-06-14 22:02:06,620 INFO  {org.perfcake.message.generator.DefaultMessageGenerator} Shutting down execution...
2016-06-14 22:02:06,620 INFO  {org.perfcake.ScenarioExecution} === Goodbye! ===]]>         </programlisting>The
            <code>warmUp</code> attribute you can see in the results determines the mode of the
         test. In our example we do not wait for the server to warm up so the attribute is set to
         false all the time. </para>
      <para>ChartDestination specified in the scenario produces a chart report with the chart
         similar to the following that can be found under
            <code>$PERFCAKE_HOME/perfcake-charts</code> directory. </para>
      <figure xml:id="ug.introduction.first-performance-test.quickstart.chart">
         <title>Your first performance test chart report</title>
         <graphic format="PNG" fileref="./images/quickstart-chart.png" scalefit="1" width="100%" align="center"/>
      </figure>
   </section>
</section>
