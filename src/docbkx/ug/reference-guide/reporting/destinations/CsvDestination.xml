<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:db="http://docbook.org/ns/docbook" xml:id="ug.reference-guide.reporting.destinations.CsvDestination" version="7.0">
   <title>CsvDestination</title>
   <para>This destination can be used to publish the measurements into a CSV file. Each result in
      the measurement is treated as a column in the file and the name of the result is used to name
      the column.</para>
   <para><emphasis>CsvDestination</emphasis> in its minimal configuration simply streams out all the
      measured data during the test execution and the CSV result file is immediately available. It
      always writes out <emphasis>Time</emphasis>, <emphasis>Iteration</emphasis> and
         <emphasis>Result</emphasis> attributes. These attributes cannot be requested in the
      scenario configuration and cannot be removed.</para>
   <para>To get better idea on what attributes can be requested in your scenario configuration, use
         <emphasis>ConsoleDestination</emphasis> which always outputs all of them. You can then pick
      those that suite your needs.</para>
   <para>By default, <emphasis>CsvDestination</emphasis> writes out all the attributes observed in
      the first measurement it receives. Changing the CSV result file to add a data column while the
      performance test is in progress would cause too much overhead. The file header once written
      remains unchanged. Attributes added later to the measurement are ignored. This is especially
      the case when it takes very long for the first result to arrive and the
         <emphasis>CsvDestination</emphasis> already reports to the CSV file. This would practically
      block any results from being reported.</para>
   <para>To handle the situation, it is possible to specify wildcards in the form of
         <code>&lt;prefix>*</code>. This is very useful when used with histogram reporters and we do
      not know the names of the attributes in advance. It is also possible to use just
         <code>*</code> as a wildcard. It is not possible to use the asterisk wildcard in the middle
      of an attribute name. The wildcard does not replace the <code>warmUp</code> attribute.
      However, such a configuration leads to storing all the results in the memory and writing the
      final CSV result file after the test is successfully finished. In case of a failure, no
      results are written. </para>
   <para>If there are any attributes missing from the records, <emphasis>CsvDestination</emphasis>
      can either skip such a record, or it can fill in the missing values with <code>null</code>.How
      to handle the </para>
   <para>The following table describes the configuration properties of CsvDestination.<table
         frame="all">
         <title>CsvDestination properties</title>
         <tgroup cols="4" align="left" colsep="1" rowsep="1">
            <colspec colname="property-name" colwidth="2*"/>
            <colspec colname="description" colwidth="2*"/>
            <colspec colname="required" colwidth="1*"/>
            <colspec colname="default-value" colwidth="2*"/>
            <thead>
               <row>
                  <entry>Property name</entry>
                  <entry>Description</entry>
                  <entry>Required</entry>
                  <entry>Default value</entry>
               </row>
            </thead>
            <tbody>
               <row>
                  <entry>path</entry>
                  <entry>A path to the output CSV file.</entry>
                  <entry>No</entry>
                  <entry> perfcake-results- ${perfcake.run.timestamp}.csv <footnote>
                        <para> See <xref
                              linkend="ug.perfcake-features.scenario-definition.filtering-properties.available-properties-table"
                           />
                        </para>
                     </footnote></entry>
               </row>
               <row>
                  <entry>delimiter</entry>
                  <entry>A CSV record delimiter.</entry>
                  <entry>No</entry>
                  <entry>;</entry>
               </row>
               <row>
                  <entry>appendStrategy</entry>
                  <entry>A strategy that is used in case, that the output file exists.
                        <code>overwrite</code> means that the file is overwritten,
                        <code>rename</code> means that the current output file is renamed by adding
                     a number-based suffix and <code>append</code> is for appending new results to
                     the original file. </entry>
                  <entry>No</entry>
                  <entry>rename</entry>
               </row>
               <row>
                  <entry>expectedAtrributes</entry>
                  <entry>A comma separated list of attributes to be recorded in the CSV result file.
                     This is useful when the attributes are not present in every measurement or it
                     takes too long for the first measurement to arrive.</entry>
                  <entry>No</entry>
                  <entry>Empty string. The attributes reported by default are
                        <emphasis>Time</emphasis>, <emphasis>Iteration</emphasis>,
                        <emphasis>Result</emphasis> and all others observed in the first measurement
                     (supposing it arrives sooner than the <emphasis>CsvDestination</emphasis>
                     reports for the first time).</entry>
               </row>
               <row>
                  <entry>missingStrategy</entry>
                  <entry>Specifies what to do in case of a missing attribute value. It can either
                     replace it with <code>null</code> when the strategy is set to
                     <code>null</code>, or it can completely skip such a record when set to
                        <code>skip</code>.</entry>
                  <entry>No</entry>
                  <entry>null</entry>
               </row>
               <row>
                  <entry>linePrefix</entry>
                  <entry>The prefix prepended to all lines in the CSV result file. This can
                     facilitate creating JSON like records for example.</entry>
                  <entry>No</entry>
                  <entry>(empty string)</entry>
               </row>
               <row>
                  <entry>lineSuffix</entry>
                  <entry>The suffix appended to all lines in the CSV result file. This can
                     facilitate creating JSON like records for example.</entry>
                  <entry>No</entry>
                  <entry>(empty string)</entry>
               </row>
               <row>
                  <entry>lineBreak</entry>
                  <entry>Line separator used to add new entry to the CSV result file.</entry>
                  <entry>No</entry>
                  <entry>\n (new line character)</entry>
               </row>
               <row>
                  <entry>skipHeader</entry>
                  <entry>Skips writing the header in the CSV result file if set to
                     <code>true</code>.</entry>
                  <entry>No</entry>
                  <entry>false</entry>
               </row>
            </tbody>
         </tgroup>
      </table>
   </para>
   <example>
      <title>An example of CsvDestination configuration</title>
      <programlisting language="xml" linenumbering="numbered" startinglinenumber="1"><![CDATA[   <destination class="CsvDestination">
      <period type="time" value="1000"/>
      <property name="path" value="${perfcake.scenario}-output.csv"/>
      <property name="appendStrategy" value="overwrite"/>
   </destination>]]></programlisting>
   </example>
   <example>
      <title>Sample output of CsvDestination</title>
      <programlisting><![CDATA[Time;Iterations;Result;warmUp;Threads;ResponseSize;Minimum;Maximum;failures;RequestSize;Average
0:00:00;1;1.306239;false;10;0;1.306239;1.306239;0;0;1.306239
0:00:00;1000;1.069117;false;10;0;1.014015;10.468919;0;0;1.1494209689999997
0:00:00;2000;1.059257;false;10;0;1.012308;10.468919;0;0;1.1295661935000005
0:00:00;3000;1.069961;false;10;0;1.012308;10.468919;0;0;1.1466806060000005]]></programlisting>
   </example>
</section>
