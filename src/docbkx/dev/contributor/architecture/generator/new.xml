<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:db="http://docbook.org/ns/docbook" xml:id="dev.contributor.architecture.generator.new"
         version="7.0">
   <title>Writing a New Generator</title>
   <para>The best way to implement a new generator is by modifying
                  <varname>DefaultMessageGenerator</varname>. The main method is
                  <varname>generate()</varname> that creates a new thread pool and generates
                  <varname>SenderTasks</varname> until the test is finished.
                  <varname>SenderTasks</varname> are submitted as tasks to the newly created thread
            pool. In the end the thread pool is shut down according to <varname>RunInfo</varname>
            configuration as described in the previous section.</para>
      <para>It is worth noticing the custom thread factory
                  <varname>DefaultMessageGenerator.DaemonThreadFactory</varname>. This makes sure we
            can quit the process even if some threads got stuck. It also sets higher priority to
            these threads.</para>
      <para><varname>DefaultMessageGenerator</varname> keeps an eye on the number of prepared
                  <varname>SenderTasks</varname> by using a BlockingQueue that is passed to the
            underlying thread pool executor. This limits the size of memory used at once.</para>
      <para>Now investigate the <varname>AbstractMessageGenerator.newSenderTask()</varname> method
            to see how <varname>SenderTasks</varname> are created. You can notice that SenderTasks
            constructors takes the generator to be able to report failures back. Other test
            execution related classes are set on the <code>SenderTask</code> as well for it to be
            able to complete its goal. A <code>SenderTask</code> instance implements
                  <code>Runnable</code> and except for default Java API, there is no notification of
            its completion.</para>
      <para>In the end just have a look to the <varname>SenderTask</varname> class. This class
            implements <varname>Runnable</varname> and does the following steps. First, it acquires
            a <varname>MessageSender</varname> from the senders pool, uses this
                  <varname>MessageSender</varname> to send one or more messages while measuring the
            time it took. When a <code>Receiver</code> is used, it awaits for a message response on
            a separate message channel. Upon the response's arrival, the total time is measured. In
            the end, the <varname>MessageSender</varname> is released. When a <code>Receiver</code>
            is in place, the <code>MessageSender</code> is not returned to the pool until we get a
            response corresponding to the original request. This prevents another thread from using
            the same <code>MessageSender</code> and thus increasing the number of concurrent
            clients.</para>
</section>
