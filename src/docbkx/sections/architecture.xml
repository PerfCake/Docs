<?xml version="1.0" encoding="utf-8"?>
<sect1 xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:db="http://docbook.org/ns/docbook" xml:id="architecture" version="5.0">
   <title>PerfCake Architecture Overview</title>
   <para>Let's start with a Figure that is worth a thousand words.</para>
   <figure id="overall-architecture">
      <title>Architecture Overview</title>
      <graphic format="PNG" fileref="../images/architecture/overall.png"/>
   </figure>
   <para>
      In the
      <xref linkend="overall-architecture"/>
      , we can see the high level overview of PerfCake's architecture.
      There is always a single Generator<indexterm>Generator</indexterm>.
      The main purpose of the Generator is to specify how the
      messages are generated. The easiest case would be to send a message to the target system, wait for the response and measure
      the response
      time. However, this would not tell us anything about performance of the target system. What is more interesting
      is a load generated in many parallel threads as fast as possible.
   </para>
   <para>
      The default generator implementation (DefaultMessageGenerator) has a queue of messages ready to be send by
      a Sender
      <indexterm>Sender</indexterm>
      to the target system. More details about Generator architecture cen be found in the next section.
      For now, just remember that Generator specifies HOW the messages are sent.
   </para>
   <para>
      A Sender
      <indexterm>Sender</indexterm>
      specifies the protocol that is used to send the message. This can be HTTP, REST, JMS, JDBC,
      SOAP, socket, file etc. The Sender is configured with a specific address for the given protocol. So the
      Sender tells
      WHERE TO send the messages.
   </para>
   <para>
      A Message
      <indexterm>Message</indexterm>
      is the content of the smallest unit of load that is sent to the target system. So basically
      it says WHAT is sent.
   </para>
   <para>
      The procedure of sending the messages is carefully monitored by the reporting facility of PerfCake. This allows us to write
      results to various outputs.
   </para>
   <para>
      Finally, there are validators that prove the responses to be valid. Some system can start responding very fast under a heavy load,
      but just with a blunt overload warning.
   </para>
   <para>
      More details about individual parts of the application can be found in later sections.
   </para>
</sect1>
