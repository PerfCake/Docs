<?xml version="1.0" encoding="utf-8"?>
<sect1 xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:db="http://docbook.org/ns/docbook" xml:id="ch-dev-developing.code-standards">
   <title>Coding Standards</title>
   <para>
      This section describes coding standards used for the PerfCake project. The detailed guidlines are based on
      Google Java Coding 
      Standard<footnote xml:id="foot-google-code">
         <para>
            <link xlink:href="http://google-styleguide.googlecode.com/svn/trunk/javaguide.html"/>
         </para>
      </footnote> with some changes applied. For a brief overview, please make sure to:
   </para>
   <itemizedlist>
      <listitem>
         <para>
            Develop tests for your features/fixes (keep the high level of test coverage),
         </para>
      </listitem>
      <listitem>
         <para>
            Use the appropriate code style and formatting (Eclipse configuration file is present in the repo),
         </para>
      </listitem>
      <listitem>
         <para>
            Avoid introducing new FindBugs warnings (see Developers' Guide to find out how to generate the site report),
         </para>
      </listitem>
      <listitem>
         <para>
            Keep backward compatibility unless previously discussed with the developers,
         </para>
      </listitem>
      <listitem>
         <para>
            Write/update the JavaDoc comments,
         </para>
      </listitem>
      <listitem>
         <para>
            Avoid bad practices<footnote>
               <para>
                  <link xlink:href="http://blog.codinghorror.com/new-programming-jargon/"/>                  
               </para>
            </footnote>,
         </para>
      </listitem>      
      <listitem>
         <para>
            You do not keep unused imports, FIXME comments, unused variables, cryptic code or anything ugly,
         </para>
      </listitem>
      <listitem>
         <para>
            Submit only a masterpiece code that you could be proud of.
         </para>
      </listitem>
   </itemizedlist>
   <para>
      Following is the complete definition of PerfCake's coding standards for source code in the Java™ Programming Language. 
      A Java source file is described as being in PerfCake Style if and only if it adheres to the rules herein.
   </para>
   <para>   
      Like other programming style guides, the issues covered span not only aesthetic issues of formatting, but other 
      types of conventions or coding standards as well. However, this document focuses primarily on the hard-and-fast rules 
      that we follow universally, and avoids giving advice that isn't clearly enforceable (whether by human or 
      tool). 
   </para>
   <para>
      In this document, unless otherwise clarified:
   </para>
   <orderedlist>
      <listitem>
         <para>
            The term <emphasis>class</emphasis> is used inclusively to mean an "ordinary" class, enum class, interface 
            or annotation type (<code>@interface</code>),
         </para>
      </listitem>
      <listitem>
         <para>
            The term <emphasis>comment</emphasis> always refers to implementation comments. We do not use the phrase "documentation comments", instead using the common term "Javadoc."            
         </para>
      </listitem>
   </orderedlist>
   <para>
      Example code in this document is non-normative. That is, while the examples are in PerfCake Style, they may not illustrate 
      the only stylish way to represent the code. Optional formatting choices made in examples should not be enforced as rules.
   </para>
   <para>Previous four paragraphs are copied from the Google Java Coding 
      Standard<xref linkend="foot-google-code"/> as well as the rest of this section.
   </para>

   <sect2>
      <title>Source file basics</title>
      <sect3>
         <title>File name</title>
         <para>
            The source file name consists of the case-sensitive name of the top-level class it contains, plus the <code>.java</code> extension.         
         </para>
      </sect3>
      <sect3>
         <title>File encoding: UTF-8</title>
         <para>
            Source files are encoded in UTF-8.            
         </para>
      </sect3>
      <sect3>
         <title>Special characters</title>
         <simplesect>
            <title>Whitespace characters</title>
            <para>
               Aside from the line terminator sequence, the <emphasis role="strong">ASCII horizontal space character (0x20)</emphasis> 
               is the only whitespace character that appears anywhere in a source file. This implies that:
            </para>
            <orderedlist>
               <listitem>
                  <para>
                     All other whitespace characters in string and character literals are escaped,                     
                  </para>
               </listitem>
               <listitem>
                  <para>
                     Tab characters are not used for indentation.                     
                  </para>
               </listitem>
            </orderedlist>
         </simplesect>
         <simplesect>
            <title>Special escape sequences</title>
            <para>
               For any character that has a special escape sequence (<code>\b</code>, <code>\t</code>, <code>\n</code>, 
               <code>\f</code>, <code>\r</code>, <code>\"</code>, <code>\'</code> and <code>\\</code>), that sequence is used 
               rather than the corresponding octal (e.g. <code>\012</code>) or Unicode (e.g. <code>\u000a</code>) escape.               
            </para>
         </simplesect>
         <simplesect>
            <title>Non-ASCII characters</title>
            <para>
               For the remaining non-ASCII characters, either the actual Unicode character (e.g. ∞) or the equivalent Unicode escape (e.g. \u221e) is used, depending only on which makes the code <emphasis role="strong">easier to read and understand</emphasis>.
            </para>
            <tip>
               <para>
                  In the Unicode escape case, and occasionally even when actual Unicode characters are used, an explanatory comment can be very helpful.
               </para>
            </tip>
            <table frame="all">
               <title>Special characters examples</title>
               <tgroup cols="2" align="left" colsep="1" rowsep="1">
                  <colspec colname="c1" colwidth="1*"/>
                  <colspec colname="c2" colwidth="1*"/>
                  <thead>
                     <row>
                        <entry>Example</entry>
                        <entry>Discussion</entry>
                     </row>
                  </thead>
                  <tbody>
                     <row>
                        <entry><programlisting language="java" linenumbering="unnumbered">String unitAbbrev = "μs";</programlisting></entry>
                        <entry>Best: perfectly clear even without a comment.</entry>
                     </row>
                     <row>
                        <entry><programlisting language="java" linenumbering="unnumbered">String unitAbbrev = "\u03bcs"; // "μs"</programlisting></entry>
                        <entry>Allowed, but there's no reason to do this.</entry>
                     </row>
                     <row>
                        <entry><programlisting language="java" linenumbering="unnumbered">String unitAbbrev = "\u03bcs"; // Greek letter mu, "s"</programlisting></entry>
                        <entry>Allowed, but awkward and prone to mistakes.</entry>
                     </row>
                     <row>
                        <entry><programlisting language="java" linenumbering="unnumbered">String unitAbbrev = "\u03bcs";</programlisting></entry>
                        <entry>Poor: the reader has no idea what this is.</entry>
                     </row>
                     <row>
                        <entry><programlisting language="java" linenumbering="unnumbered">return '\ufeff' + content; // byte order mark</programlisting></entry>
                        <entry>Good: use escapes for non-printable characters, and comment if necessary.</entry>
                     </row>
                  </tbody>
               </tgroup>
            </table>
            <tip>
               <para>
                  Never make your code less readable simply out of fear that some programs might not handle non-ASCII characters properly. If that should happen, 
                  those programs are <emphasis role="strong">broken</emphasis> and they must be <emphasis role="strong">fixed</emphasis>.
               </para>
            </tip>               
         </simplesect>
      </sect3>
   </sect2>      
      
   <sect2>
      <title>Source file structure</title>
      <para>
         A source file consists of, <emphasis role="strong">in order</emphasis>:         
      </para>
      <orderedlist>
         <listitem>
            <para>License or copyright information, if present,</para>
         </listitem>
         <listitem>
            <para>Package statement,</para>
         </listitem>
         <listitem>
            <para>Import statements,</para>
         </listitem>
         <listitem>
            <para>Exactly one top-level class.</para>
         </listitem>
      </orderedlist>
      <para>
         <emphasis role="strong">Exactly one blank line</emphasis> separates each section that is present.
      </para>
      <sect3>
         <title>License or copyright information, if present</title>
         <para>
            If license or copyright information belongs in a file, it belongs here.            
         </para>
      </sect3>
      <sect3>
         <title>Package statement</title>
         <para>
            The package statement is <emphasis role="strong">not line-wrapped</emphasis>. The column limit (<xref linkend="sec-column-limit"/>) does not apply to package statements.            
         </para>
      </sect3>
      <sect3 xml:id="sec-import-stat">
         <title>Import statements</title>
         <simplesect>
            <title>No wildcard imports</title>
            <para>
               <emphasis role="strong">Wildcard imports</emphasis>, static or otherwise, <emphasis
                  role="strong">are not used</emphasis>. </para>
         </simplesect>
         <simplesect>
            <title>No line-wrapping</title>
            <para> Import statements are <emphasis role="strong">not line-wrapped</emphasis>. The
               column limit (<xref linkend="sec-column-limit"/>) does not apply to import
               statements. </para>
         </simplesect>
         <simplesect>
            <title>Ordering and spacing</title>
            <para> Import statements are divided into groups by the start of the package name.
               Typically, two first parts of the package name separated by dots specify a group. The
               groups and their content appear in ASCII sort order. </para>
         </simplesect>
      </sect3>
      <sect3>
         <title>Class declaration</title>
         <simplesect>
            <title>Exactly one top-level class declaration</title>
            <para>
               Each top-level class resides in a source file of its own.               
            </para>
         </simplesect>
         <simplesect>
            <title>Class member ordering</title>
            <para>
               The ordering of the members of a class can have a great effect on learnability, but there is no single correct recipe for how to do it. Different classes may order their members differently.
            </para>
            <para>
               What is important is that each class order its members in <emphasis role="strong">some logical order</emphasis>, which its maintainer could 
               explain if asked. For example, new methods are not just habitually added to the end of the class, as 
               that would yield "chronological by date added" ordering, which is not a logical ordering.
            </para>
         </simplesect>
         <simplesect>
            <title>Overloads: never split</title>
            <para>
               When a class has multiple constructors, or multiple methods with the same name, these appear sequentially, 
               with no intervening members.               
            </para>
         </simplesect>
      </sect3>      
   </sect2>
   <sect2>
      <title>Formatting</title>
      <note>
         <para>
            <emphasis role="strong">Terminology Note:</emphasis>
            <emphasis>block-like construct</emphasis> refers to the body of a class, method or
            constructor. Note that, by <xref linkend="sec-array-init"/>, any array initializer
               <emphasis>may</emphasis> optionally be treated as if it were a block-like construct.
         </para>
      </note>
      <sect3>
         <title>Braces</title>
         <simplesect>
            <title>Braces are used where optional</title>
            <para> Braces are used with <code>if</code>, <code>else</code>, <code>for</code>,
                  <code>do</code> and <code>while</code> statements, even when the body is empty or
               contains only a single statement. </para>
         </simplesect>
         <simplesect xml:id="sec-nonempty-blocks">
            <title>Nonempty blocks: K &amp; R style</title>
            <para> Braces follow the Kernighan and Ritchie style ("Egyptian brackets") for
                  <emphasis>nonempty</emphasis> blocks and block-like constructs: </para>
            <itemizedlist>
               <listitem>
                  <para>No line break before the opening brace,</para>
               </listitem>
               <listitem>
                  <para>Line break after the opening brace,</para>
               </listitem>
               <listitem>
                  <para>Line break before the closing brace</para>
               </listitem>
               <listitem>
                  <para> Line break after the closing brace <emphasis>if</emphasis> that brace
                     terminates a statement or the body of a method, constructor or
                        <emphasis>named</emphasis> class. For example, there is
                        <emphasis>no</emphasis> line break after the brace if it is followed by
                        <code>else</code> or a comma.</para>
               </listitem>
            </itemizedlist>
            <para>Example:</para>
            <programlisting language="java" linenumbering="unnumbered"><![CDATA[return new MyClass() {
  @Override public void method() {
    if (condition()) {
      try {
        something();
      } catch (ProblemException e) {
        recover();
      }
    }
  }
};]]>           </programlisting>
            <para> A few exceptions for enum classes are given in <xref linkend="sec-enum-classes"/>. </para>
         </simplesect>
         <simplesect>
            <title>Empty blocks: may be concise</title>
            <para> An empty block or block-like construct <emphasis role="italics">may</emphasis> be
               closed immediately after it is opened, with no characters or line break in between
                  (<code>{}</code>), <emphasis role="strong">unless</emphasis> it is part of a
                  <emphasis>multi-block statement</emphasis> (one that directly contains multiple
               blocks: <code>if/else-if/else</code> or <code>try/catch/finally</code>). </para>
            <para>Example:</para>
            <programlisting language="java" linenumbering="unnumbered"><![CDATA[void doNothing() {}]]></programlisting>
         </simplesect>
      </sect3>
      <sect3>
         <title>Block indentation: +3 spaces</title>
         <para> Each time a new block or block-like construct is opened, the indent increases by two
            spaces. When the block ends, the indent returns to the previous indent level. The indent
            level applies to both code and comments throughout the block. (See the example in <xref
               linkend="sec-nonempty-blocks"/>.) </para>
      </sect3>
      <sect3>
         <title>One statement per line</title>
         <para> Each statement is followed by a line-break. </para>
      </sect3>
      <sect3 xml:id="sec-column-limit">
         <title>Column limit: 400</title>
         <para> PerfCake uses a column limit of 400 characters. Except as noted below, any line that
            would exceed this limit must be line-wrapped, as explained in <xref
               linkend="sec-line-wrap"/>. </para>
      </sect3>
      <sect3 xml:id="sec-line-wrap">
         <title>Line-wrapping</title>
         <para><emphasis role="bold">Terminology Note:</emphasis> When code that might otherwise
            legally occupy a single line is divided into multiple lines, typically to avoid
            overflowing the column limit, this activity is called <emphasis role="italic"
               >line-wrapping</emphasis>.</para>
         <para>There is no comprehensive, deterministic formula showing <emphasis role="italic"
               >exactly</emphasis> how to line-wrap in every situation. Very often there are several
            valid ways to line-wrap the same piece of code.</para>
         <tip>
            <para>Extracting a method or local variable may solve the problem without the need to
               line-wrap. </para>
         </tip>
         <simplesect>
            <title>Where to break</title>
            <para>The prime directive of line-wrapping is: prefer to break at a <emphasis
                  role="bold">higher syntactic level</emphasis>. Also: </para>
            <orderedlist>
               <listitem>
                  <para>When a line is broken at a <emphasis role="italic">non-assignment</emphasis>
                     operator the break comes <emphasis role="italic">before</emphasis> the symbol.
                     (Note that this is not the same practice used in Google style for other
                     languages, such as C++ and JavaScript.)</para>
                  <itemizedlist>
                     <listitem>
                        <para>This also applies to the following "operator-like" symbols: the dot
                           separator (<code>.</code>), the ampersand in type bounds (<code>&lt;T
                              extends Foo &amp; Bar></code>), and the pipe in catch blocks
                              (<code>catch (FooException | BarException e)</code>).</para>
                     </listitem>
                  </itemizedlist>
               </listitem>
               <listitem>
                  <para>When a line is broken at an <emphasis role="italic">assignment</emphasis>
                     operator the break typically comes <emphasis role="italic">after</emphasis> the
                     symbol, but either way is acceptable.</para>
                  <itemizedlist>
                     <listitem>
                        <para>This also applies to the "assignment-operator-like" colon in an
                           enhanced <code>for</code> ("foreach") statement.</para>
                     </listitem>
                  </itemizedlist>
               </listitem>
               <listitem>
                  <para>A method or constructor name stays attached to the open parenthesis
                        (<code>(</code>) that follows it.</para>
               </listitem>
               <listitem>
                  <para>A comma (<code>,</code>) stays attached to the token that precedes
                     it.</para>
               </listitem>
            </orderedlist>
         </simplesect>
         <simplesect>
            <title>Indent continuation lines at least +6 spaces</title>
            <para>When line-wrapping, each line after the first (each <emphasis role="italic"
                  >continuation line</emphasis>) is indented at least +4 from the original
               line.</para>
            <para>When there are multiple continuation lines, indentation may be varied beyond +4 as
               desired. In general, two continuation lines use the same indentation level if and
               only if they begin with syntactically parallel elements.</para>
            <para><xref linkend="sec-horiz-align"/>S addresses the discouraged practice of
               using a variable number of spaces to align certain tokens with previous lines.</para>
         </simplesect>
      </sect3>
      <sect3>
         <title>Whitespace</title>
         <simplesect>
            <title>Vertical whitespace</title>
            <para>A single blank line appears:</para>
            <orderedlist>
               <listitem>
                  <para><emphasis role="italic">Between</emphasis> consecutive members (or
                     initializers) of a class: fields, constructors, methods, nested classes, static
                     initializers, instance initializers.</para>
                  <itemizedlist>
                     <listitem>
                        <para><emphasis role="bold">Exception:</emphasis> A blank line between two
                           consecutive fields (having no other code between them) is optional. Such
                           blank lines are used as needed to create <emphasis role="italic">logical
                              groupings</emphasis> of fields.</para>
                     </listitem>
                  </itemizedlist>
               </listitem>
               <listitem>
                  <para>Within method bodies, as needed to create <emphasis role="italic">logical
                        groupings</emphasis> of statements.</para>
               </listitem>
               <listitem>
                  <para><emphasis role="italic">Optionally</emphasis> before the first member or
                     after the last member of the class (neither encouraged nor discouraged).</para>
               </listitem>
               <listitem>
                  <para>As required by other sections of this document (such as <xref
                        linkend="sec-import-stat"/>).</para>
               </listitem>
            </orderedlist>
            <para>
               <emphasis role="italic">Multiple</emphasis> consecutive blank lines are permitted,
               but never required (or encouraged).</para>
         </simplesect>
         <simplesect>
            <title>Horizontal whitespace</title>
            <para>Beyond where required by the language or other style rules, and apart from
               literals, comments and Javadoc, a single ASCII space also appears in the following
               places <emphasis role="bold">only</emphasis>.</para>
            <orderedlist>
               <listitem>
                  <para>Separating any reserved word, such as <code>if</code>, <code>for</code> or
                        <code>catch</code>, from an open parenthesis (<code>(</code>) that follows
                     it on that line.</para>
               </listitem>
               <listitem>
                  <para>Separating any reserved word, such as <code>else</code> or
                        <code>catch</code>, from a closing curly brace (<code>}</code>) that
                     precedes it on that line.</para>
               </listitem>
               <listitem>
                  <para>Before any open curly brace (<code>{</code>), with two exceptions:</para>
                  <itemizedlist>
                     <listitem>
                        <para><code>@SomeAnnotation({a, b})</code> (no space is used)</para>
                     </listitem>
                     <listitem>
                        <para><code>String[][] x = {{"foo"}};</code> (no space is required between
                              <code>{{</code>,  by item 8 below)</para>
                     </listitem>
                  </itemizedlist>
               </listitem>
               <listitem>
                  <para>On both sides of any binary or ternary operator. This also applies to the
                     following "operator-like" symbols:</para>
                  <itemizedlist>
                     <listitem>
                        <para>the ampersand in a conjunctive type bound: <code>&lt;T extends Foo
                              &amp; Bar></code></para>
                     </listitem>
                     <listitem>
                        <para>the pipe for a catch block that handles multiple exceptions:
                              <code>catch (FooException | BarException e)</code></para>
                     </listitem>
                     <listitem>
                        <para>the colon (<code>:</code>) in an enhanced <code>for</code> ("foreach")
                           statement</para>
                     </listitem>
                  </itemizedlist>
               </listitem>
               <listitem>
                  <para>After <code>,:;</code> or the closing parenthesis (<code>)</code>) of a
                     cast</para>
               </listitem>
               <listitem>
                  <para>On both sides of the double slash (<code>//</code>) that begins an
                     end-of-line comment. Here, multiple spaces are allowed, but not required</para>
               </listitem>
               <listitem>
                  <para>Between the type and variable of a declaration: <code>List&lt;String>
                        list</code></para>
               </listitem>
               <listitem>
                  <para><emphasis role="italic">Optional</emphasis> just inside both braces of an
                     array initializer</para>
                  <itemizedlist>
                     <listitem>
                        <para><code>new int[] {5, 6}</code> and <code>new int[] { 5, 6 }</code> are
                           both valid</para>
                     </listitem>
                  </itemizedlist>
               </listitem>
            </orderedlist>
            <note>
               <para>This rule never requires or forbids additional space at the start or end of a
                  line, only interior space.</para>
            </note>
         </simplesect>
         <simplesect xml:id="sec-horiz-align">
            <title>Horizontal alignment: never required</title>
            <para><emphasis role="bold">Terminology Note:</emphasis>
               <emphasis role="italic">Horizontal alignment</emphasis> is the practice of adding a
               variable number of additional spaces in your code with the goal of making certain
               tokens appear directly below certain other tokens on previous lines.</para>
            <para>This practice is permitted, but is <emphasis role="bold">never required</emphasis>
               by PerfCake Style. It is not even required to <emphasis role="italic"
                  >maintain</emphasis> horizontal alignment in places where it was already used.
               Here is an example without alignment, then using alignment:</para>
            <programlisting language="java" linenumbering="unnumbered"><![CDATA[private int x; // this is fine
private Color color; // this too

private int   x;     // permitted, but future edits
private Color color; // may leave it unaligned]]></programlisting>
            <tip>
               <para>Alignment can aid readability, but it creates problems for future maintenance.
                  Consider a future change that needs to touch just one line. This change may leave
                  the formerly-pleasing formatting mangled, and that is <emphasis role="bold"
                     >allowed</emphasis>. More often it prompts the coder (perhaps you) to adjust
                  whitespace on nearby lines as well, possibly triggering a cascading series of
                  reformattings. That one-line change now has a "blast radius." This can at worst
                  result in pointless busywork, but at best it still corrupts version history
                  information, slows down reviewers and exacerbates merge conflicts.</para>
            </tip>
         </simplesect>
      </sect3>
      <sect3>
         <title>Grouping parentheses: recommended</title>
         <para>Optional grouping parentheses are omitted only when author and reviewer agree that
            there is no reasonable chance the code will be misinterpreted without them, nor would
            they have made the code easier to read. It is not reasonable to assume that every reader
            has the entire Java operator precedence table memorized.</para>
      </sect3>
      <sect3>
         <title>Specific constructs</title>
         <simplesect xml:id="sec-enum-classes">
            <title>Enum classes</title>
            <para>After each comma that follows an enum constant, a line-break is optional.</para>
            <para>An enum class with no methods and no documentation on its constants may optionally
               be formatted as if it were an array initializer (see <xref linkend="sec-array-init"
               />).</para>
            <programlisting language="java" linenumbering="unnumbered">private enum Suit { CLUBS, HEARTS, SPADES, DIAMONDS }</programlisting>
            <para>Since enum classes <emphasis role="italic">are classes</emphasis>, all other rules
               for formatting classes apply.</para>
         </simplesect>
         <simplesect>
            <title>Variable declarations</title>
            <itemizedlist>
               <listitem>
                  <para><emphasis role="bold">One variable per declaration</emphasis></para>
                  <para>Every variable declaration (field or local) declares only one variable:
                     declarations such as <code>int a, b;</code> are not used.</para>
               </listitem>
               <listitem>
                  <para><emphasis role="bold">Declared when needed, initialized as soon as
                        possible</emphasis></para>
                  <para>Local variables are <emphasis role="bold">not</emphasis> habitually declared
                     at the start of their containing block or block-like construct. Instead, local
                     variables are declared close to the point they are first used (within reason),
                     to minimize their scope. Local variable declarations typically have
                     initializers, or are initialized immediately after declaration.</para>
               </listitem>
            </itemizedlist>
         </simplesect>
         <simplesect xml:id="sec-array-init">
            <title>Arrays</title>
            <itemizedlist>
               <listitem>
                  <para><emphasis role="bold">Array initializers: can be
                     "block-like"</emphasis></para>
                  <para>Any array initializer may optionally be formatted as if it were a
                     "block-like construct." For example, the following are all valid (not an
                     exhaustive list):</para>
                  <programlisting language="java" linenumbering="unnumbered"><![CDATA[new int[] {        new int[] {
   0, 1, 2, 3          0,
}                      1,
                       2,
new int[] {            3,
   0, 1,            }
   2, 3
}                   new int[] 
                       {0, 1, 2, 3}]]></programlisting>
               </listitem>
               <listitem>
                  <para><emphasis role="bold">No C-style array declarations</emphasis></para>
                  <para>The square brackets form a part of the type, not the variable:
                        <code>String[] args</code>, not <code>String args[]</code>.</para>
               </listitem>
            </itemizedlist>
         </simplesect>
         <simplesect>
            <title>Switch statements</title>
            <para><emphasis role="bold">Terminology Note</emphasis>: Inside the braces of a
                  <emphasis role="italic">switch block</emphasis> are one or more <emphasis
                  role="italic">statement groups</emphasis>. Each statement group consists of one or
               more <emphasis role="italic">switch labels</emphasis> (either <code>case FOO:</code>
               or <code>default:</code>), followed by one or more statements.</para>
            <itemizedlist>
               <listitem>
                  <para><emphasis role="bold">Indentation</emphasis></para>
                  <para>As with any other block, the contents of a switch block are indented
                     +3.</para>
                  <para>After a switch label, a newline appears, and the indentation level is
                     increased +3, exactly as if a block were being opened. The following switch
                     label returns to the previous indentation level, as if a block had been
                     closed.</para>
               </listitem>
               <listitem>
                  <para><emphasis role="bold">Fall-through: commented</emphasis></para>
                  <para>Within a switch block, each statement group either terminates abruptly (with
                     a <code>break</code>, <code>continue</code>, <code>return</code> or thrown
                     exception), or is marked with a comment to indicate that execution will or
                        <emphasis role="italic">might</emphasis> continue into the next statement
                     group. Any comment that communicates the idea of fall-through is sufficient
                     (typically <code>// fall through</code>). This special comment is not required
                     in the last statement group of the switch block. Example:</para>
                  <programlisting language="java" linenumbering="unnumbered"><![CDATA[switch (input) {
   case 1:
   case 2:
      prepareOneOrTwo(); 
      // fall through
   case 3:
      handleOneTwoOrThree();
      break;
   default:
      handleLargeNumber(input);
}]]></programlisting>
               </listitem>
               <listitem>
                  <para><emphasis role="bold">The default case is present</emphasis></para>
                  <para>Each switch statement includes a <code>default</code> statement group, even
                     if it contains no code.</para>
               </listitem>
            </itemizedlist>
         </simplesect>
         <simplesect>
            <title>Annotations</title>
            <para>Annotations applying to a class, method or constructor appear immediately after
               the documentation block, and each annotation is listed on a line of its own (that is,
               one annotation per line). These line breaks do not constitute line-wrapping (<xref
                  linkend="sec-line-wrap"/>), so the indentation level is not increased.
               Example:</para>
            <programlisting language="java" linenumbering="unnumbered"><![CDATA[@Override
@Nullable
public String getNameIfPresent() { ... }]]></programlisting>
            <para><emphasis role="bold">Exception:</emphasis> A single parameterless annotation may
               instead appear together with the first line of the signature, for example:</para>
            <programlisting language="java" linenumbering="unnumbered"><![CDATA[@Override public int hashCode() { ... }]]></programlisting>
            <para>Annotations applying to a field also appear immediately after the documentation
               block, but in this case, <emphasis role="italic">multiple</emphasis> annotations
               (possibly parameterized) may be listed on the same line; for example:</para>
            <programlisting language="java" linenumbering="unnumbered"><![CDATA[@Partial @Mock DataLoader loader;]]></programlisting>
            <para>There are no specific rules for formatting parameter and local variable
               annotations.</para>
         </simplesect>
         <simplesect>
            <title>Comments</title>
            <itemizedlist>
               <listitem>
                  <para><emphasis role="bold">Block comment style</emphasis></para>
                  <para>Block comments are indented at the same level as the surrounding code. They
                     may be in <code>/* ... */</code> style or <code>// ...</code> style. For
                     multi-line <code>/* ... */</code> comments, subsequent lines must start with
                        <code>*</code> aligned with the <code>*</code> on the previous line. <programlisting language="java" linenumbering="unnumbered"><![CDATA[/*
 * This is          // And so          /* Or you can
 * okay.            // is this.         * even do this. */
 */]]></programlisting>Comments are not enclosed in boxes drawn with asterisks or other
                     characters.</para>
                     <tip>
                        <para>When writing multi-line comments, use the <code>/* ... */</code> style
                           if you want automatic code formatters to re-wrap the lines when necessary
                           (paragraph-style). Most formatters don't re-wrap lines in <code>//
                              ...</code> style comment blocks.</para>
                     </tip>
               </listitem>
            </itemizedlist>
         </simplesect>
         <simplesect>
            <title>Modifiers</title>
            <para>Class and member modifiers, when present, appear in the order recommended by the
               Java Language Specification:</para>
            <para>
               <programlisting language="java" linenumbering="unnumbered">public protected private abstract static final transient volatile synchronized native strictfp</programlisting>
            </para>
         </simplesect>
         <simplesect>
            <title>Numeric literals</title>
            <para><code>long</code>-valued integer literals use an uppercase <code>L</code> suffix,
               never lowercase (to avoid confusion with the digit <code>1</code>). For example,
                  <code>3000000000L</code> rather than <code>3000000000l</code>.</para>
            <para>It is advised to use the numeric literal underscore separator (<code>_</code>) as
               it comes with Java 7. This is even better for readability:
                  <code>3_000_000_000L</code>.</para>
         </simplesect>
      </sect3>
   </sect2>
   <sect2>
      <title>Naming</title>
      <sect3>
         <title>Rules common to all identifiers</title>
         <para>Identifiers use only ASCII letters and digits, and in two cases noted below,
            underscores. Thus each valid identifier name is matched by the regular expression
               <code>\w+</code>.</para>
         <para>In PerfCake Style special prefixes or suffixes, like those seen in the examples
               <code>name_</code>, <code>mName</code>, <code>s_name</code> and <code>kName</code>,
            are <emphasis role="bold">not</emphasis> used.</para>
      </sect3>
      <sect3>
         <title>Rules by identifier type</title>
         <simplesect>
            <title>Package names</title>
            <para>Package names are all lowercase, with consecutive words simply concatenated
               together (no underscores). For example, <code>com.example.deepspace</code>, not
                  <code>com.example.deepSpace</code> or <code>com.example.deep_space</code>.</para>
         </simplesect>
         <simplesect>
            <title>Class names</title>
            <para>Class names are written in UpperCamelCase (<xref linkend="sec-camel-case"
               />).</para>
            <para>Class names are typically nouns or noun phrases. For example,
                  <code>Character</code> or <code>ImmutableList</code>. Interface names may also be
               nouns or noun phrases (for example, <code>List</code>), but may sometimes be
               adjectives or adjective phrases instead (for example, <code>Readable</code>).</para>
            <para>There are no specific rules or even well-established conventions for naming
               annotation types.</para>
            <para><emphasis role="italic">Test</emphasis> classes are named starting with the name
               of the class they are testing, and ending with <code>Test</code>. For example,
                  <code>HashTest</code> or <code>HashIntegrationTest</code>.</para>
         </simplesect>
         <simplesect>
            <title>Method names</title>
            <para>Method names are written in lowerCamelCase (<xref linkend="sec-camel-case"
               />).</para>
            <para>Method names are typically verbs or verb phrases. For example,
                  <code>sendMessage</code> or <code>stop</code>.</para>
            <para>Underscores may appear in JUnit test method names to separate logical components
               of the name. One typical pattern is <code>test&lt;MethodUnderTest>_&lt;state></code>,
               for example <code>testPop_emptyStack</code>. There is no <emphasis role="bold">one
                  correct way</emphasis> to name test methods.</para>
         </simplesect>
         <simplesect>
            <title>Constant names</title>
            <para>Constant names use <code>CONSTANT_CASE</code>: all uppercase letters, with words
               separated by underscores. But what <emphasis role="italic">is</emphasis> a constant,
               exactly?</para>
            <para>Every constant is a static final field, but not all static final fields are
               constants. Before choosing constant case, consider whether the field <emphasis
                  role="italic">really feels</emphasis> like a constant. For example, if any of that
               instance's observable state can change, it is almost certainly not a constant. Merely
                  <emphasis role="italic">intending</emphasis> to never mutate the object is
               generally not enough.</para>
            <para>Examples: </para>
            <para><programlisting><![CDATA[// Constants
static final int NUMBER = 5;
static final ImmutableList<String> NAMES = ImmutableList.of("Ed", "Ann");
static final Joiner COMMA_JOINER = Joiner.on(','); // because Joiner is immutable
static final SomeMutableType[] EMPTY_ARRAY = {};
enum SomeEnum { ENUM_CONSTANT }

// Not constants
static String nonFinal = "non-final";
final String nonStatic = "non-static";
static final Set<String> mutableCollection = new HashSet<String>();
static final ImmutableSet<SomeMutableType> mutableElements = ImmutableSet.of(mutable);
static final Logger logger = Logger.getLogger(MyClass.getName());
static final String[] nonEmptyArray = {"these", "can", "change"};]]></programlisting>These names are
               typically nouns or noun phrases.</para>
         </simplesect>
         <simplesect>
            <title>Non-constant field names</title>
            <para>Non-constant field names (static or otherwise) are written in lowerCamelCase
                  (<xref linkend="sec-camel-case"/>).</para>
            <para>These names are typically nouns or noun phrases. For example,
                  <code>computedValues</code> or <code>index</code>.</para>
         </simplesect>
         <simplesect>
            <title>Parameter names</title>
            <para>Parameter names are written in lowerCamelCase (<xref linkend="sec-camel-case"
               />).</para>
            <para>One-character parameter names should be avoided.</para>
         </simplesect>
         <simplesect>
            <title>Local variable names</title>
            <para>Local variable names are written in lowerCamelCase (<xref linkend="sec-camel-case"
               />), and can be abbreviated more liberally than other types of names.</para>
            <para>However, one-character names should be avoided, except for temporary and looping
               variables.</para>
            <para>Even when final and immutable, local variables are not considered to be constants,
               and should not be styled as constants.</para>
         </simplesect>
         <simplesect>
            <title>Type variable names</title>
            <para>Each type variable is named in one of two styles:</para>
            <itemizedlist>
               <listitem>
                  <para>A single capital letter, optionally followed by a single numeral (such as
                        <code>E</code>, <code>T</code>, <code>X</code>, <code>T2</code>).</para>
               </listitem>
               <listitem>
                  <para>A name in the form used for classes (see Class names above), followed by the
                     capital letter <code>T</code> (examples: <code>RequestT</code>,
                        <code>FooBarT</code>).</para>
               </listitem>
            </itemizedlist>
         </simplesect>
      </sect3>
      <sect3 xml:id="sec-camel-case">
         <title>Camel case: defined</title>
         <para>Sometimes there is more than one reasonable way to convert an English phrase into
            camel case, such as when acronyms or unusual constructs like "IPv6" or "iOS" are
            present. To improve predictability, Google Style specifies the following (nearly)
            deterministic scheme.</para>
         <para>Beginning with the prose form of the name:</para>
         <para><orderedlist>
               <listitem>
                  <para>Convert the phrase to plain ASCII and remove any apostrophes. For example,
                     "Müller's algorithm" might become "Muellers algorithm".</para>
               </listitem>
               <listitem>
                  <para>Divide this result into words, splitting on spaces and any remaining
                     punctuation (typically hyphens).</para>
                  <itemizedlist>
                     <listitem>
                        <para><emphasis role="italic">Recommended:</emphasis> if any word already
                           has a conventional camel-case appearance in common usage, split this into
                           its constituent parts (e.g., "AdWords" becomes "ad words"). Note that a
                           word such as "iOS" is not really in camel case <emphasis role="italic"
                              >per se</emphasis>; it defies <emphasis role="italic">any</emphasis>
                           convention, so this recommendation does not apply.</para>
                     </listitem>
                  </itemizedlist>
               </listitem>
               <listitem>
                  <para>Now lowercase <emphasis role="italic">everything</emphasis> (including
                     acronyms), then uppercase only the first character of:</para>
                  <itemizedlist>
                     <listitem>
                        <para>... each word, to yield upper camel case, or</para>
                     </listitem>
                     <listitem>
                        <para>... each word except the first, to yield lower camel case.</para>
                     </listitem>
                  </itemizedlist>
               </listitem>
               <listitem>
                  <para>Finally, join all the words into a single identifier.</para>
               </listitem>
            </orderedlist>Note that the casing of the original words is almost entirely disregarded.
            Examples:</para>
         <para>Prose form Correct Incorrect "XML HTTP request" XmlHttpRequest XMLHTTPRequest "new
            customer ID" newCustomerId newCustomerID "inner stopwatch" innerStopwatch innerStopWatch
            "supports IPv6 on iOS?" supportsIpv6OnIos supportsIPv6OnIOS "YouTube importer"
            YouTubeImporter YoutubeImporter* </para>
         <para>*Acceptable, but not recommended.</para>
            <note>
               <para>Some words are ambiguously hyphenated in the English language: for example
               "nonempty" and "non-empty" are both correct, so the method names
                  <code>checkNonempty</code> and <code>checkNonEmpty</code> are likewise both
               correct.</para>
            </note>
      </sect3>
   </sect2>
   <sect2>
      <title>Programming Practices</title>
      <sect3>
         <title>@Override: always used</title>
         <para>A method is marked with the @Override annotation whenever it is legal. This includes
            a class method overriding a superclass method, a class method implementing an interface
            method, and an interface method respecifying a superinterface method.
            Exception:@Override may be omitted when the parent method is @Deprecated.</para>
      </sect3>
      <sect3>
         <title>Caught exceptions: not ignored</title>
         <para>Except as noted below, it is very rarely correct to do nothing in response to a
            caught exception. (Typical responses are to log it, or if it is considered "impossible",
            rethrow it as an AssertionError.) When it truly is appropriate to take no action
            whatsoever in a catch block, the reason this is justified is explained in a comment. try
            { int i = Integer.parseInt(response); return handleNumericResponse(i); } catch
            (NumberFormatException ok) { // it's not numeric; that's fine, just continue } return
            handleTextResponse(response); Exception: In tests, a caught exception may be ignored
            without comment if it is named expected. The following is a very common idiom for
            ensuring that the method under test does throw an exception of the expected type, so a
            comment is unnecessary here. try { emptyStack.pop(); fail(); } catch
            (NoSuchElementException expected) { }</para>
      </sect3>
      <sect3>
         <title>Static members: qualified using class</title>
         <para>When a reference to a static class member must be qualified, it is qualified with
            that class's name, not with a reference or expression of that class's type. Foo aFoo =
            ...; Foo.aStaticMethod(); // good aFoo.aStaticMethod(); // bad
            somethingThatYieldsAFoo().aStaticMethod(); // very bad</para>
      </sect3>
      <sect3>
         <title>Finalizers: not used</title>
         <para>It is extremely rare to override Object.finalize. Tip: Don't do it. If you absolutely
            must, first read and understand Effective Java Item 7, "Avoid Finalizers," very
            carefully, and then don't do it.</para>
      </sect3>
   </sect2>
   <sect2>
      <title>Javadoc</title>
      <sect3>
         <title>Formatting</title>
         <simplesect>
            <title>General form</title>
            <para>The basic formatting of Javadoc blocks is as seen in this example: /** * Multiple
               lines of Javadoc text are written here, * wrapped normally... */ public int
               method(String p1) { ... } ... or in this single-line example: /** An especially short
               bit of Javadoc. */ The basic form is always acceptable. The single-line form may be
               substituted when there are no at-clauses present, and the entirety of the Javadoc
               block (including comment markers) can fit on a single line.</para>
         </simplesect>
         <simplesect>
            <title>Paragraphs</title>
            <para>One blank line—that is, a line containing only the aligned leading asterisk
               (*)—appears between paragraphs, and before the group of "at-clauses" if present. Each
               paragraph but the first has &lt;p&gt; immediately before the first word, with no
               space after.</para>
         </simplesect>
         <simplesect>
            <title>At-clauses</title>
            <para>Any of the standard "at-clauses" that are used appear in the order @param,
               @return, @throws, @deprecated, and these four types never appear with an empty
               description. When an at-clause doesn't fit on a single line, continuation lines are
               indented four (or more) spaces from the position of the @.</para>
         </simplesect>
      </sect3>
      <sect3>
         <title>The summary fragment</title>
         <para>The Javadoc for each class and member begins with a brief summary fragment. This
            fragment is very important: it is the only part of the text that appears in certain
            contexts such as class and method indexes. This is a fragment—a noun phrase or verb
            phrase, not a complete sentence. It does not begin with A {@code Foo} is a..., or This
            method returns..., nor does it form a complete imperative sentence like Save the
            record.. However, the fragment is capitalized and punctuated as if it were a complete
            sentence. Tip: A common mistake is to write simple Javadoc in the form /** @return the
            customer ID */. This is incorrect, and should be changed to /** Returns the customer ID.
            */.</para>
      </sect3>
      <sect3>
         <title>Where Javadoc is used</title>
         <para>At the minimum, Javadoc is present for every public class, and every public or
            protected member of such a class, with a few exceptions noted below. Other classes and
            members still have Javadoc as needed. Whenever an implementation comment would be used
            to define the overall purpose or behavior of a class, method or field, that comment is
            written as Javadoc instead. (It's more uniform, and more tool-friendly.)</para>
         <simplesect>
            <title>Exception: self-explanatory methods</title>
            <para>Javadoc is optional for "simple, obvious" methods like getFoo, in cases where
               there really and truly is nothing else worthwhile to say but "Returns the foo".
               Important: it is not appropriate to cite this exception to justify omitting relevant
               information that a typical reader might need to know. For example, for a method named
               getCanonicalName, don't omit its documentation (with the rationale that it would say
               only /** Returns the canonical name. */) if a typical reader may have no idea what
               the term "canonical name" means!</para>
         </simplesect>
         <simplesect>
            <title>Exception: overrides</title>
            <para>Javadoc is not always present on a method that overrides a supertype method.
            </para>
         </simplesect>
      </sect3>
   </sect2>
</sect1>
