<?xml version="1.0" encoding="utf-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:db="http://docbook.org/ns/docbook" xml:id="ch-architecture" status="draft">
   <title>PerfCake Architecture</title>
   <para>
      In this chapter we describe the inner architecture of PerfCake. First we inspect the overall design and then we delve
      deeper into the individual parts.
   </para>
   <para>
     There is an easy concept that is good to bear in mind while working with PerfCake -- a single communication unit
     called a <indexterm>Message</indexterm>. PerfCake usually sends the message to the target system and measures the response
     time needed by the system being measured to provide a valid response. It is also the basic unit of load that can be generated
     for the target system. 
   </para>
   <sect1>
      <title>PerfCake Architecture Overview</title>
      <para>Let's start with a Figure that is worth a thousand words.</para>
      <figure id="overall-architecture">
         <graphic fileref="../images/architecture/overall.png"/>
         <title>Architecture Overview</title>
      </figure>
      <para>
         In the <link linkend="overall-architecture" />, we can see the high level overview of PerfCake's architecture.
         There is always a single <indexterm>Generator</indexterm>. The main purpose of the Generator is to specify how the
         messages are generated. The easiest case would be to send a message to the target system, wait for the response and measure
         the response time. However, this would not tell us anything about performance of the target system. What is more interesting
         is a load generated in many parallel threads as fast as possible.  
      </para>
      <para>
         The default generator implementation (DefaultMessageGenerator) has a queue of messages ready to be send by 
         a <indexterm>Sender</indexterm> to the target system. More details about Generator architecture cen be found in the next section.
         For now, just remember that Generator specifies HOW the messages are sent.
      </para>
      <para>
         A <indexterm>Sender</indexterm> specifies the protocol that is used to send the message. This can be HTTP, REST, JMS, JDBC, 
         SOAP, socket, file etc. The Sender is configured with a specific address for the given protocol. So the Sender tells
         WHERE TO send the messages. 
      </para>
      <para>
         A <indexterm>Message</indexterm> is the content of the smallest unit of load that is sent to the target system. So basically
         it says WHAT is sent.
      </para>
      <para>
         The procedure of sending the messages is carefully monitored by the reporting facility of PerfCake. This allows us to write
         results to various outputs.
      </para>
      <para>
         Finally, there are validators that prove the responses to be valid. Some system can start responding very fast under a heavy load,
         but just with a blunt overload warning.
      </para>
      <para>
         More details about individual parts of the application can be found in later sections.
      </para>
   </sect1>
   <xi:include href="sections/dev-generator.xml"/>
   <xi:include href="sections/dev-sender.xml"/>
   <xi:include href="sections/dev-reporting.xml"/>
   <xi:include href="sections/dev-validation.xml"/>
</chapter>
