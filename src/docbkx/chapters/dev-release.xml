<?xml version="1.0" encoding="utf-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
   xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:db="http://docbook.org/ns/docbook"
   xml:id="ch-dev-release" status="draft" version="1">
   <title>Release Procedure</title>
   <para> This chapter describes details about the release procedure using Maven and following the
      git flow principles. The target audience are core developers with appropriate access rights.
   </para>
   <para>First, start off with a new release branch and let Maven prepare the release for us <xref linkend="fig-release-prepare"/>.</para>
   <figure id="fig-release-prepare">
      <title>Prepare a release branch</title>
      <programlisting language="xml" linenumbering="unnumbered">
<![CDATA[$ git checkout -b release/v{VERSION} devel
$ mvn release:prepare]]>
      </programlisting>
   </figure>
   <para>At this point, you should get the artifacts from the <code>target</code> directory for later publishing <xref linkend="fig-release-branches-devel"/>.</para>
   <para>Never ever try to perform the release using the Maven release plugin. It cannot be configured to publish the artifacts and
      breaks the git-flow branching/tagging.</para>
   <para>The rest is about getting git into a good shape. This starts by getting the updated <code>pom.xml</code>
      into the devel branch.</para>
   <figure id="fig-release-branches-devel">
      <title>Merge the changes to the devel branch</title>
      <programlisting language="xml" linenumbering="unnumbered">
<![CDATA[$ git checkout devel
$ git merge --no-ff release/v{VERSION}]]>
      </programlisting>
   </figure>
   <para>We need to get the correct <code>pom.xml</code> to the master branch as well. For this, we will use the
      commit prior to the head in the release branch <xref linkend="fig-release-branches-master"/>.</para>
   <figure id="fig-release-branches-master">
      <title>Merge the changes to the master branch as well</title>
      <programlisting language="xml" linenumbering="unnumbered">
<![CDATA[$ git checkout master
$ git merge --no-ff release/v{VERSION}~1]]>
      </programlisting>
   </figure>
   <para>The last step is to clean everything up and go public<xref linkend="fig-release-branches-cleanup"/>.</para>
   <figure id="fig-release-branches-cleanup">
      <title>Merge the changes to the master branch as well</title>
      <programlisting language="xml" linenumbering="unnumbered">
<![CDATA[$ git branch -D release/v{VERSION}
$ git push --all && git push --tags]]>
      </programlisting>
   </figure>
   <para>Only users the approved account in the Sonatype JIRA
      <footnote>
         <para>
            <ulink url="https://issues.sonatype.org/browse/OSSRH-7134" />
         </para>
      </footnote> 
      can upload the artifacts. Then follow the rules specified in the Sonatype OSS Maven Repository Usage Guide
      <footnote>
         <para>
            <ulink url="https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide#SonatypeOSSMavenRepositoryUsageGuide-7b.StageExistingArtifacts" />      
         </para>
      </footnote>.
   </para>
</chapter>
