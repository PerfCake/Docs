<?xml version="1.0" encoding="utf-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:db="http://docbook.org/ns/docbook" xml:id="ch-ug-running" status="draft">
   <title>Running PerfCake</title>
   <para>
      This chapter describes various ways to run PerfCake in
      order to execute a performance test - scenario:
      <itemizedlist>
         <listitem>PerfCake command line interface (CLI)</listitem>
         <listitem>Maven plugin</listitem>
         <listitem>Eclipse plugin - Perfclipse</listitem>
      </itemizedlist>
   </para>
   <para>The following sections will take a look at each of them.</para>
   <sect1 xml:id="ch-ug-running.cli">
      <title>Command line</title>
      <para>
         PerfCake is a command line tool so it provides a CLI for executing a
         PerfCake scenario (see
         <xref linkend="ch-ug-scenario"/>
         ). The main script can be found in
         <code>$PERFCAKE_HOME/bin/perfcake.sh</code>
         for Linux OS or
         <code>%PERFCAKE_HOME%\bin\perfcake.bat</code>
         in case of Windows OS.
      </para>
      <para>If the script is run without arguments, from the
         following help that is printed you can see the arguments that can be
         used to control the scenario execution.
      </para>
      <programlisting>
<![CDATA[[PERFCAKE_HOME]$ ./bin/perfcake.sh
usage: ScenarioExecution -s <SCENARIO> [-sd <SCENARIOS_DIR>] [-md
                         <MESSAGES_DIR>] [-D<property=value>]*
 -D <property=value>                       system properties
 -md,--messages-dir <MESSAGES_DIR>         directory for messages
 -pd,--plugins-dir <PLUGINS_DIR>           directory for plugins
 -pf,--properties-file <PROPERTIES_FILE>   custom system properties file
 -s,--scenario <SCENARIO>                  scenario to be executed
 -sd,--scenarios-dir <SCENARIOS_DIR>       directory for scenarios]]>
      </programlisting>
      <para>
         The only mandatory argument is
         <code>-s</code>
         (or
         <code>--scenario</code>
         ), that specifies the name of the scenario to be executed. PerfCake will
         look for the scenario definition in the file called
         <code>&lt;SCENARIO&gt;.xml</code>
         that is
         placed under the directory that is located at
         <code>$PERFCAKE_HOME/resources/scenarios</code>
         . The path to the directory with scenarios
         can be specified by the
         <code>-sd</code>
         (or
         <code>--scenarios-dir</code>
         ) argument.
      </para>
      <para>
         If the scenario is configured to send any message (see
         <xref linkend="ch-ug-sending.messages"/>
         ), it will look under the directory that is by placed at
         <code>$PERFCAKE_HOME/resources/messages</code>
         . That location can be specified by the
         <code>-md</code>
         (or
         <code>--messages-dir</code>
         ) argument.
      </para>
      <para>
         If you need to set one or more system properties for scenario (see
         <xref linkend="ch-ug-scenario.filtering-properties"/>
         ), there are two ways.
         You can either use
         <code>-Dproperty=value</code>
         like arguments or specify a path to the property file using the
         <code>-pf</code>
         (or
         <code>--properties-file</code>
         ) argument.
      </para>
      <para>
         Following table describes all the PerfCake CLI arguments.
         <table frame="all">
            <title>PerfCake CLI arguments</title>
            <tgroup cols="4" align="left" colsep="1" rowsep="1">
               <colspec colname="argument-name" colwidth="2*"/>
               <colspec colname="description" colwidth="2*"/>
               <colspec colname="required" colwidth="1*"/>
               <colspec colname="default-value" colwidth="2*"/>
               <thead>
                  <row>
                     <entry>Argument</entry>
                     <entry>Description</entry>
                     <entry>Required</entry>
                     <entry>Default value</entry>
                  </row>
               </thead>
               <tbody>
                  <row>
                     <entry>-s, --scenario</entry>
                     <entry>Name of the scenario to be executed.</entry>
                     <entry>Yes</entry>
                     <entry>-</entry>
                  </row>
                  <row>
                     <entry>-sd, --scenarios-dir</entry>
                     <entry>Path to the directory where scenarios are located.</entry>
                     <entry>No</entry>
                     <entry>$PERFCAKE_HOME/resources/scenarios</entry>
                  </row>
                  <row>
                     <entry>-md, --messages-dir</entry>
                     <entry>Path to the directory where message files are located.</entry>
                     <entry>No</entry>
                     <entry>$PERFCAKE_HOME/resources/messages</entry>
                  </row>
                  <row>
                     <entry>-pd, --plugins-dir</entry>
                     <entry>
                        Path to the directory where plugins are located (see
                        <xref linkend="ch-ug-extending.custom-components"/>
                        ).
                     </entry>
                     <entry>No</entry>
                     <entry>$PERFCAKE_HOME/resources/plugins</entry>
                  </row>
                  <row>
                     <entry>-D&lt;property&gt;=&lt;value&gt;</entry>
                     <entry>Sets a single system property with a given name and value. Multiple property arguments are allowed.</entry>
                     <entry>No</entry>
                     <entry>-</entry>
                  </row>
                  <row>
                     <entry>-pf, --properties-file</entry>
                     <entry>Path to the file containing system properties.</entry>
                     <entry>No</entry>
                     <entry>-</entry>
                  </row>
               </tbody>
            </tgroup>
         </table>
      </para>

   </sect1>
   <sect1 xml:id="ch-ug-running.maven">
      <title>Maven - perfcake-maven-plugin</title>
      <para>Maven plugin allows to run PerfCake scenario within a Maven build.
         This makes performance test automation more easy and encourage you to run performance tests on a regular basis,
         e.g. in within your favorite CI server. Running performance test on a regular basis
         allows you to spot performance drops very soon and thus make much more easy to identify,
         which commit has caused performance
         regression.
      </para>
      <simplesect>
         <title>Configuration</title>
         <para>
            Currently plugin has only one goal
            <code>scenario-run</code>
            , which runs specified PerfCake scenario.
            By default, this goal is executed in
            <code>integration-test</code>
            phase
            (i.e. assumes, that you deploy/start your application in
            <code>pre-integration-test</code>
            phase and shut it down
            in
            <code>post-integration-test</code>
            phase).
         </para>
         <para>
            The only mandatory parameter is
            <code>&lt;scenario&gt;</code>
            , which specifies the name of the scenario to be run.
            Optionally, you can also specify
            <code>scenarios-dir</code>
            ,
            <code>messages-dir</code>
            and
            <code>plugins-dir</code>
            ,
            which specify paths to directory containing scenarios, messages and plugins, respectively.
         </para>
         <para>
            If you don't setup these parameters, pluing assumes, that appropriate directories (scenarios, messages, plugins)
            are in
            <code>src/test/resources/perfcake</code>
            . If any of them doesn't exists, plugin will use
            <code>src/test/resources</code>
            as a fallback value for missing parameter. You can also speficy PerfCake version which should be used for scenario execution.
            It can be set up by adding
            <code>&lt;perfcake-version&gt;</code>
            element into plugin configuration.
         </para>
         <para>
            Appropriate PerfCake jar file is obtained via Maven, so you can use any PerfCake version
            which is available in your Maven repository. If the version is not specified
            or appropriate artifact cannot be resolved, PerfCake on the class path is used - if not changed by other set up,
            there should be PerfCake which this plugin depends on.
         </para>
      </simplesect>
      <simplesect>
         <title>Example configuration</title>
         <programlisting language="xml" linenumbering="numbered" startinglinenumber="1"><![CDATA[...
<build>
   <plugins>
      <plugin>
        <groupId>org.perfcake.maven</groupId>
        <artifactId>perfcake-maven-plugin</artifactId>
        <version>1.0</version>
        <configuration>
          <scenario>my_perfcake_scenario</scenario>
          <perfcake-version>3.0</perfcake-version>
        </configuration>
        <executions>
          <execution>
            <id>perfcake-scenario-run</id>
            <goals>
              <goal>scenario-run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
   </plugins>
</build>
...]]></programlisting>
      </simplesect>
   </sect1>
   <sect1 xml:id="ch-ug-running.perfclipse">
      <title>Eclipse plugin - PerfClipse</title>
      <para>
         There is an Eclipse plugin for managing, editing and running PerfCake scenarios called PerfClipse
         <footnote>
            <para>
               <!-- TODO: change to the link about the project instead of github. -->
               <link xlink:href="https://github.com/PerfCake/PerfClipse"/>
            </para>
         </footnote>
         .
      </para>
      <para>
         To run the scenario you need to have a PerfCake project with the scenario included. Then the scenario can
         be run by selecting it in Package Explorer and running as "PerfCake Scenario" (see
         <xref linkend="ch-ug-running.perfclipse.run-as"/>
         ). The output from PerfCake will
         be printed into Console view (See
         <xref linkend="ch-ug-running.perfclipse.console"/>
         ).
      </para>
      <figure id="ch-ug-running.perfclipse.run-as">
         <title>Run as PerfCake scenario</title>
         <graphic format="PNG" fileref="../images/perfclipse-run-as.png" scalefit="1" width="100%" align="center"/>
      </figure>
      <figure id="ch-ug-running.perfclipse.console">
         <title>PerfClipse Console</title>
         <graphic format="PNG" fileref="../images/perfclipse-console.png" scalefit="1" width="100%" align="center"/>
      </figure>
   </sect1>
   <sect1 xml:id="ch-ug-running-logging">
      <title>Logging configuration</title>
      <para>PerfCake uses Log4j<footnote>
            <para><link xlink:href="http://logging.apache.org/log4j/1.2/"/></para>
         </footnote> as a logging framework. All messages sent to the user interface are passed
         through the loggers. The main configuration file for Log4j can be found in the root
         directory of the binary installation or in <code>src/main/resources/</code> in the source
         code and its name is <code>log4j.xml</code>.</para>
      <para>In the default configuration, there is an asynchronous appender to write log messages to
         the log file (<code>perfcake.log</code>), and a synchronous appender to write messages
         directly to the console. The synchronous adapter can cause a significant performance
         degradation and can influence the performance measurement accuracy. Normally, this is not
         likely to happen as only a few messages are logged. Should your test write significant
         output to console (e.g. exceptions, error messages), then consider switching it to the
         asynchronous appender.</para>
      <note>
         <para>Please note that this is not the case of ConsoleDestination as this uses direct
            console output. On the other hand, you should be careful about the Log4jDestination as
            this relies on the same configuration file (so far it was not possible to have 2
            different log4j configurations in the same application).</para>
      </note>
      <para>Having console appender asynchronous can cause some messages to be lost especially
         during PerfCake termination. This can be the case when an user provides an invalid scenario
         file, PerfCake terminates immediately and the error messages is not shown as the
         asynchronous buffer did not get filled and written anywhere.</para>
      <para>To switch console logging to asynchronous, in log4j.xml move the line
            <code>&lt;appender-ref ref="CONSOLE"/></code> from the <code>root</code> section to be
         inside of the <code>&lt;appender name="ASYNC" ...></code> section.</para>
   </sect1>
</chapter>
