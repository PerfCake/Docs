<?xml version="1.0" encoding="utf-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="ch-ug-generating" status="draft">
   <title>Generating Load</title>
   <simplesect>
      <para>
         Generator is an object which uses Sender objects to send and
         receive messages. Each generator represents a method or technique how
         the load (sending the messages) is handled.
         It is capable of generating the load for a specified duration which can be an amount of time or a number of iterations using a specified
         number of concurrent threads. To define the duration and its length you have to configure a generator
         <code>run</code>
         of the specified type in the scenario.
      </para>
      <para>
         Following table shows the generator
         <code>run</code>
         options:
         <table frame="all">
            <title>
               Generator
               <code>run</code>
               options
            </title>
            <tgroup cols="2" align="left" colsep="1" rowsep="1">
               <colspec colname="run type" colwidth="1*"/>
               <colspec colname="description" colwidth="1*"/>
               <thead>
                  <row>
                     <entry>
                        Generator
                        <code>run</code>
                        type
                     </entry>
                     <entry>Value description</entry>
                  </row>
               </thead>
               <tbody>
                  <row>
                     <entry>time</entry>
                     <entry>Time duration in milliseconds</entry>
                  </row>
                  <row>
                     <entry>iteration</entry>
                     <entry>Number of iterations</entry>
                  </row>
               </tbody>
            </tgroup>
         </table>
      </para>
      <para>
         The generating is performed in so called iterations. In a single iteration generator takes a sender from the sender pool, uses it to send
         all the messages specified in the scenario (See <xref linkend="ch-ug-sending.messages"/>) and after that it returns the sender back to the
         sender pool. The reporting module (See <xref linkend="ch-ug-reporting"/>) treats this as a single iteration.
      </para>
      <simplesect>
         <title>
            An example of the
            <code>run</code>
            configuration in a generator:
         </title>
         <programlisting language="xml" linenumbering="numbered" startinglinenumber="1"><![CDATA[...
<generator class="..." threads="...">
   <run type="time" value="10000"/>
   ...
   (properties)
   ...
</generator>
...]]></programlisting>
      </simplesect>
      <para>The following section describes the generator which can be
         used in PerfCake to generate the load.
      </para>
   </simplesect>
   <sect1>
      <title>Generators</title>
      <xi:include href="../sections/ug-DefaultMessageGenerator.xml"/>
   </sect1>
</chapter>
