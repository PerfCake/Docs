<?xml version="1.0" encoding="utf-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:db="http://docbook.org/ns/docbook" xml:id="ch-ug-sending" status="draft">
   <title>Sending Messages</title>
   <simplesect>
      This chapter is divided into two parts. The first part describes the senders that are used
      to send messages to a specified target using various ways of transport. The second part
      is about messages that represent the actual payload that is sent by senders.
   </simplesect>
   <sect1 xml:id="ch-ug-sending.senders">
      <title>Senders</title>
      <para>As it was mentioned before a sender is an object responsible for sending a message to the tested system and receiving the response
         in a specific way via specific transport.
      </para>
      <para>In the following sections you can find a complete description of all
         senders that can be used by PerfCake including all of their properties.
      </para>
      <xi:include href="../sections/ug-CommandSender.xml"/>
      <xi:include href="../sections/ug-DummySender.xml"/>
      <xi:include href="../sections/ug-GroovySender.xml"/>
      <xi:include href="../sections/ug-HTTPSender.xml"/>
      <xi:include href="../sections/ug-HTTPSSender.xml"/>
      <!-- <xi:include href="../sections/ug-ChannelDatagramSender.xml"/> -->
      <!-- <xi:include href="../sections/ug-ChannelFileSender.xml"/> -->
      <!-- <xi:include href="../sections/ug-ChannelSender.xml"/> -->
      <!-- <xi:include href="../sections/ug-ChannelSocketSender.xml"/> -->
      <xi:include href="../sections/ug-JDBCSender.xml"/>
      <xi:include href="../sections/ug-JMSSender.xml"/>
      <!-- <xi:include href="../sections/ug-LDAPSender.xml"/> -->
      <xi:include href="../sections/ug-PlainSocketSender.xml"/>
      <xi:include href="../sections/ug-RequestResponseJMSSender.xml"/>
      <!-- <xi:include href="../sections/ug-SOAPSender.xml"/> -->
      <xi:include href="../sections/ug-SSLSocketSender.xml"/>
   </sect1>
   <sect1 xml:id="ch-ug-sending.messages">
      <title>Messages</title>
      <para>
         A message is an actual payload that is sent by a sender. To specify what will be sent you should use the
         <code>uri</code>
         attribute of the particular message element in the scenario configuration. The <code>uri</code> can be an absolute file path
         in a form of <code>file://...</code>, URL or just a file name in which case PerfCake will look for the file
         in the messages directory (See <ulink url="https://www.perfcake.org/quickstart/"/>). 
      </para>
      <para>
         The scenario can be configured to
         send more that one message or to send a message more than once in a single iteration. To specify multiple
         different messages you just need to add more
         <code>message</code>
         elements in the
         <code>messages</code>
         configuration. To send a particular message more than once use the
         <code>multiplicity</code>
         attribute of the respective
         <code>message</code>
         element.
      </para>
      <simplesect>
         <title>An example of messages configuration:</title>
         <programlisting language="xml" linenumbering="numbered" startinglinenumber="1"><![CDATA[...
<messages>
   ...
   <message uri="message1.txt">
      <header name="header.name" value="header.value"/>
      <header name="header2" value="you-know"/>
      <property name="Empire.State.Building" value="A lot of $"/>
   </message>
   <message uri="message2.xml" multiplicity="2"/>
   ...
</messages>
...]]></programlisting>
         <para>
            In the example above there are 2 messages defined. In the case of the first message the payload is taken from the file
            <code>message1.txt</code>
            and the message has two headers and one property specified.
            The second message is taken from the file
            <code>message2.xml</code>
            and will be sent two times in
            each iteration.
         </para>
      </simplesect>
   </sect1>
</chapter>
